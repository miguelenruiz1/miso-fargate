version: 0.2

env:
  variables:
    ACCOUNT_ID:      "988732899429"
    REGION:          "us-east-1"
    IMAGE_REPO_NAME: "python_app"

    
phases:
  install:
    runtime-versions:
      python: 3.12
    commands:
      - echo "Instalando dependencias del proyecto..."      
      - pip install -r requirements.txt

  pre_build:
    commands:
      - echo "Ejecutando pruebas unitarias con pytest..."
      - pytest tests/
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com

  build:
    commands:
      - echo "build started on `date`"
      - echo "Building the Docker image..."
      - docker build -t $IMAGE_REPO_NAME .
      - docker tag $IMAGE_REPO_NAME:latest $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_REPO_NAME:latest

  post_build:
    commands:
      - echo "Build completed on `date`"
      - echo "Pushing the Docker image..."
      - docker push $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_REPO_NAME:latest
      - echo "writing image definitions file..."
      - printf '[{"name":"Container-app-python","imageUri":"%s"}]' $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_REPO_NAME:latest > imagedefinitions.json

      - echo "writing task definition file..."
      - |
        cat <<EOF > taskdef.json
        {
          "executionRoleArn": "arn:aws:iam::$ACCOUNT_ID:role/ecsTaskExecutionRole",
          "containerDefinitions": [
            {
              "portMappings": [
                {
                  "hostPort": 5000,
                  "protocol": "tcp",
                  "containerPort": 5000
                }
              ],
              "image": "$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_REPO_NAME:latest",
              "essential": true,
              "name": "Container-app-python"
            }
          ],
          "requiresCompatibilities": ["FARGATE"],
          "networkMode": "awsvpc",
          "cpu": "256",
          "memory": "512",
          "family": "task-app-python"
        }
        EOF

      - cat taskdef.json

artifacts:
  files:
    - '**/*'
    - imagedefinitions.json
    - imagedetails.json
  secondary-artifacts:
    definitionsartifact:
      files:
        - appspec.json
        - taskdef.json
      discard-paths: yes
    imageartifact:
      files:
        - imagedetails.json
