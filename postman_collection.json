{
	"info": {
		"_postman_id": "ca27d804-65b8-4a7e-92ea-5e111b0daf5d",
		"name": "Blacklist Microservice API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"description": "Colección de Postman para probar el microservicio de lista negra de correos electrónicos. Incluye documentación detallada y pruebas automatizadas para cada endpoint. Es necesario incluir un token de autorización válido en el encabezado con el valor del token para que las solicitudes sean exitosas.",
		"_exporter_id": "7738564",
		"_collection_link": "https://misw-4304-devavocados.postman.co/workspace/MISW-4304-DevAvocados-Workspace~35cbc35d-011d-4f78-bf18-04522ea9c4aa/collection/7738564-ca27d804-65b8-4a7e-92ea-5e111b0daf5d?action=share&source=collection_link&creator=7738564"
	},
	"item": [
		{
			"name": "Restablecer servicio",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{BEARER_TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{SERVICE_HOST}}:{{SERVICE_PORT}}/reset",
					"protocol": "http",
					"host": [
						"{{SERVICE_HOST}}"
					],
					"port": "{{SERVICE_PORT}}",
					"path": [
						"reset"
					]
				},
				"description": "Este endpoint reinicia el estado de la base de datos. Requiere un token de autorización válido en el encabezado."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Estado HTTP es 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Mensaje de éxito\", function () {",
							"    pm.expect(pm.response.json().message).to.eql(\"Database reset successfully\");",
							"});",
							"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Chequeo de salud",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{SERVICE_HOST}}:{{SERVICE_PORT}}/ping",
					"protocol": "http",
					"host": [
						"{{SERVICE_HOST}}"
					],
					"port": "{{SERVICE_PORT}}",
					"path": [
						"ping"
					]
				},
				"description": "Este endpoint verifica que el servicio esté vivo devolviendo un mensaje 'pong'. No requiere token de autorización."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Estado HTTP es 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Mensaje de respuesta es 'pong'\", function () {",
							"    pm.expect(pm.response.json().message).to.eql(\"pong\");",
							"});",
							"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Agregar email a la lista negra",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{BEARER_TOKEN}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{EMAIL_ADDRESS}}\",\n    \"app_uuid\": \"{{APP_UUID}}\",\n    \"blocked_reason\": \"{{BLOCKED_REASON}}\"\n}"
				},
				"url": {
					"raw": "http://{{SERVICE_HOST}}:{{SERVICE_PORT}}/blacklists",
					"protocol": "http",
					"host": [
						"{{SERVICE_HOST}}"
					],
					"port": "{{SERVICE_PORT}}",
					"path": [
						"blacklists"
					]
				},
				"description": "Este endpoint agrega un correo electrónico a la lista negra. Requiere un token de autorización válido y un cuerpo JSON con los campos `email`, `app_uuid` y opcionalmente `blocked_reason`."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Estado HTTP es 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Mensaje de éxito\", function () {",
							"    pm.expect(pm.response.json().message).to.eql(\"Email successfully blacklisted\");",
							"});",
							"pm.test(\"Datos del email están presentes\", function () {",
							"    const data = pm.response.json().data;",
							"    pm.expect(data).to.have.property(\"email\");",
							"    pm.expect(data).to.have.property(\"app_uuid\");",
							"    pm.expect(data).to.have.property(\"blocked_reason\");",
							"});",
							"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('data');",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Agregar email a la lista negra con token incorrecto",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{BEARER_TOKEN}}abcdef"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{EMAIL_ADDRESS}}\",\n    \"app_uuid\": \"{{APP_UUID}}\",\n    \"blocked_reason\": \"{{BLOCKED_REASON}}\"\n}"
				},
				"url": {
					"raw": "http://{{SERVICE_HOST}}:{{SERVICE_PORT}}/blacklists",
					"protocol": "http",
					"host": [
						"{{SERVICE_HOST}}"
					],
					"port": "{{SERVICE_PORT}}",
					"path": [
						"blacklists"
					]
				},
				"description": "Este endpoint intenta agregar un correo electrónico a la lista negra con un token de autorización incorrecto. Debería devolver un error 401 (Unauthorized)."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Estado HTTP es 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"Mensaje de error es 'Unauthorized'\", function () {",
							"    pm.expect(pm.response.json().message).to.eql(\"Unauthorized\");",
							"});",
							"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Agregar email a la lista negra sin token",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{EMAIL_ADDRESS}}\",\n    \"app_uuid\": \"{{APP_UUID}}\",\n    \"blocked_reason\": \"{{BLOCKED_REASON}}\"\n}"
				},
				"url": {
					"raw": "http://{{SERVICE_HOST}}:{{SERVICE_PORT}}/blacklists",
					"protocol": "http",
					"host": [
						"{{SERVICE_HOST}}"
					],
					"port": "{{SERVICE_PORT}}",
					"path": [
						"blacklists"
					]
				},
				"description": "Este endpoint intenta agregar un correo electrónico a la lista negra sin proporcionar un token de autorización. Debería devolver un error 401 (Unauthorized)."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Estado HTTP es 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"Mensaje de error es 'Unauthorized'\", function () {",
							"    pm.expect(pm.response.json().message).to.eql(\"Unauthorized\");",
							"});",
							"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Consultar un email que está en la lista negra",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{BEARER_TOKEN}}"
					}
				],
				"url": {
					"raw": "http://{{SERVICE_HOST}}:{{SERVICE_PORT}}/blacklists/{{EMAIL_ADDRESS}}",
					"protocol": "http",
					"host": [
						"{{SERVICE_HOST}}"
					],
					"port": "{{SERVICE_PORT}}",
					"path": [
						"blacklists",
						"{{EMAIL_ADDRESS}}"
					]
				},
				"description": "Este endpoint consulta si un correo electrónico está en la lista negra. Requiere un token de autorización válido."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Estado HTTP es 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"El email está bloqueado\", function () {",
							"    const data = pm.response.json();",
							"    pm.expect(data.blocked).to.eql(true);",
							"});",
							"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData).to.have.property('blocked');",
							"    pm.expect(jsonData).to.have.property('blocked_reason');",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Consultar si un email está en la lista negra sin token",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{SERVICE_HOST}}:{{SERVICE_PORT}}/blacklists/{{EMAIL_ADDRESS}}",
					"protocol": "http",
					"host": [
						"{{SERVICE_HOST}}"
					],
					"port": "{{SERVICE_PORT}}",
					"path": [
						"blacklists",
						"{{EMAIL_ADDRESS}}"
					]
				},
				"description": "Este endpoint intenta consultar si un correo electrónico está en la lista negra sin proporcionar un token de autorización. Debería devolver un error 401 (Unauthorized)."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Estado HTTP es 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"Mensaje de error es 'Unauthorized'\", function () {",
							"    pm.expect(pm.response.json().message).to.eql(\"Unauthorized\");",
							"});",
							"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Consultar un email que está en la lista negra con token incorrecto",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{BEARER_TOKEN}}abcdef"
					}
				],
				"url": {
					"raw": "http://{{SERVICE_HOST}}:{{SERVICE_PORT}}/blacklists/{{EMAIL_ADDRESS}}",
					"protocol": "http",
					"host": [
						"{{SERVICE_HOST}}"
					],
					"port": "{{SERVICE_PORT}}",
					"path": [
						"blacklists",
						"{{EMAIL_ADDRESS}}"
					]
				},
				"description": "Este endpoint intenta consultar si un correo electrónico está en la lista negra con un token de autorización incorrecto. Debería devolver un error 401 (Unauthorized)."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Estado HTTP es 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"Mensaje de error es 'Unauthorized'\", function () {",
							"    pm.expect(pm.response.json().message).to.eql(\"Unauthorized\");",
							"});",
							"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Consultar un email que no está en la lista negra",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{BEARER_TOKEN}}"
					}
				],
				"url": {
					"raw": "http://{{SERVICE_HOST}}:{{SERVICE_PORT}}/blacklists/{{WHITELIST_EMAIL_ADDRESS}}",
					"protocol": "http",
					"host": [
						"{{SERVICE_HOST}}"
					],
					"port": "{{SERVICE_PORT}}",
					"path": [
						"blacklists",
						"{{WHITELIST_EMAIL_ADDRESS}}"
					]
				},
				"description": "Este endpoint consulta si un correo electrónico no está en la lista negra. Debería devolver un estado 200 con `blocked: false` y `blocked_reason: null`."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Estado HTTP es 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"El email no está bloqueado\", function () {",
							"    const data = pm.response.json();",
							"    pm.expect(data.blocked).to.eql(false);",
							"    pm.expect(data.blocked_reason).to.eql(null);",
							"});",
							"pm.test(\"La respuesta tiene la estructura correcta\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData).to.have.property('blocked');",
							"    pm.expect(jsonData).to.have.property('blocked_reason');",
							"});"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "SERVICE_HOST",
			"value": "localhost"
		},
		{
			"key": "SERVICE_PORT",
			"value": "5000"
		},
		{
			"key": "EMAIL_ADDRESS",
			"value": "test@example.com"
		},
		{
			"key": "APP_UUID",
			"value": "123e4567-e89b-12d3-a456-426614174000"
		},
		{
			"key": "BLOCKED_REASON",
			"value": "Actividad sospechosa detectada"
		},
		{
			"key": "BEARER_TOKEN",
			"value": "supersecrettoken123"
		},
		{
			"key": "WHITELIST_EMAIL_ADDRESS",
			"value": "test2@example.com"
		}
	]
}